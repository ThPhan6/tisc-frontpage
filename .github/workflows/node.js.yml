# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master, staging, test ]
  pull_request:
    branches: [ master, staging, test ]

jobs:
  quality-control:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Quality Control with Sonar
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    #- run: npm ci
    #- run: npm run build --if-present
    #- run: npm test
  deploy-dev-server:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test' # run this job only for the test branch
    steps:
    # DigitalOcean Droplet already have deploy files
    - uses: actions/checkout@v3
    - name: Deploy TISC Webapp to DigitalOcean Droplet
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEV_SERVER_IP }}
        username: ${{ secrets.DEV_SERVER_USERNAME }}
        key: ${{ secrets.DEV_SERVER_SSH_PRIVATE_KEY }}
        port: ${{ secrets.DEV_SERVER_PORT }}
        script: /var/www/dev/cd_frontpage.sh test
  deploy-staging-server:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' # run this job only for the staging branch
    steps:
    # DigitalOcean Droplet already have deploy files
    - uses: actions/checkout@v3
    - name: Deploy TISC Webapp to DigitalOcean Droplet
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEV_SERVER_IP }}
        username: ${{ secrets.DEV_SERVER_USERNAME }}
        key: ${{ secrets.DEV_SERVER_SSH_PRIVATE_KEY }}
        port: ${{ secrets.DEV_SERVER_PORT }}
        script: /var/www/cd_frontpage.sh staging
